//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.TaskRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Todo", Namespace="http://schemas.datacontract.org/2004/07/Todos")]
    [System.SerializableAttribute()]
    public partial class Todo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string textField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int timesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string text {
            get {
                return this.textField;
            }
            set {
                if ((object.ReferenceEquals(this.textField, value) != true)) {
                    this.textField = value;
                    this.RaisePropertyChanged("text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int times {
            get {
                return this.timesField;
            }
            set {
                if ((this.timesField.Equals(value) != true)) {
                    this.timesField = value;
                    this.RaisePropertyChanged("times");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskRef.IAsyncTodos", CallbackContract=typeof(client.TaskRef.IAsyncTodosCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IAsyncTodos {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncTodos/Repeat")]
        void Repeat(client.TaskRef.Todo task);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncTodos/Repeat")]
        System.Threading.Tasks.Task RepeatAsync(client.TaskRef.Todo task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/GetTaskById", ReplyAction="http://tempuri.org/IAsyncTodos/GetTaskByIdResponse")]
        client.TaskRef.Todo GetTaskById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/GetTaskById", ReplyAction="http://tempuri.org/IAsyncTodos/GetTaskByIdResponse")]
        System.Threading.Tasks.Task<client.TaskRef.Todo> GetTaskByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/AddTask", ReplyAction="http://tempuri.org/IAsyncTodos/AddTaskResponse")]
        void AddTask(client.TaskRef.Todo task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/AddTask", ReplyAction="http://tempuri.org/IAsyncTodos/AddTaskResponse")]
        System.Threading.Tasks.Task AddTaskAsync(client.TaskRef.Todo task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/RemoveTask", ReplyAction="http://tempuri.org/IAsyncTodos/RemoveTaskResponse")]
        client.TaskRef.Todo RemoveTask(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/RemoveTask", ReplyAction="http://tempuri.org/IAsyncTodos/RemoveTaskResponse")]
        System.Threading.Tasks.Task<client.TaskRef.Todo> RemoveTaskAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/UpdateTask", ReplyAction="http://tempuri.org/IAsyncTodos/UpdateTaskResponse")]
        client.TaskRef.Todo UpdateTask(int id, string text, int times);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAsyncTodos/UpdateTask", ReplyAction="http://tempuri.org/IAsyncTodos/UpdateTaskResponse")]
        System.Threading.Tasks.Task<client.TaskRef.Todo> UpdateTaskAsync(int id, string text, int times);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsyncTodosCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncTodos/RepeatResult")]
        void RepeatResult(string result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsyncTodosChannel : client.TaskRef.IAsyncTodos, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AsyncTodosClient : System.ServiceModel.DuplexClientBase<client.TaskRef.IAsyncTodos>, client.TaskRef.IAsyncTodos {
        
        public AsyncTodosClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AsyncTodosClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AsyncTodosClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncTodosClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncTodosClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Repeat(client.TaskRef.Todo task) {
            base.Channel.Repeat(task);
        }
        
        public System.Threading.Tasks.Task RepeatAsync(client.TaskRef.Todo task) {
            return base.Channel.RepeatAsync(task);
        }
        
        public client.TaskRef.Todo GetTaskById(int id) {
            return base.Channel.GetTaskById(id);
        }
        
        public System.Threading.Tasks.Task<client.TaskRef.Todo> GetTaskByIdAsync(int id) {
            return base.Channel.GetTaskByIdAsync(id);
        }
        
        public void AddTask(client.TaskRef.Todo task) {
            base.Channel.AddTask(task);
        }
        
        public System.Threading.Tasks.Task AddTaskAsync(client.TaskRef.Todo task) {
            return base.Channel.AddTaskAsync(task);
        }
        
        public client.TaskRef.Todo RemoveTask(int id) {
            return base.Channel.RemoveTask(id);
        }
        
        public System.Threading.Tasks.Task<client.TaskRef.Todo> RemoveTaskAsync(int id) {
            return base.Channel.RemoveTaskAsync(id);
        }
        
        public client.TaskRef.Todo UpdateTask(int id, string text, int times) {
            return base.Channel.UpdateTask(id, text, times);
        }
        
        public System.Threading.Tasks.Task<client.TaskRef.Todo> UpdateTaskAsync(int id, string text, int times) {
            return base.Channel.UpdateTaskAsync(id, text, times);
        }
    }
}
